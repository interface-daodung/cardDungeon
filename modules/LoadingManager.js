/**
 * LoadingManager.js - Real Resource Loading
 * Qu·∫£n l√Ω m√†n h√¨nh loading v√† th·ª±c s·ª± load t√†i nguy√™n game
 */
class LoadingManager {
    constructor() {
        this.loadingScreen = document.getElementById('loading-screen');
        this.progressFill = document.getElementById('progress-fill');
        this.loadingText = document.getElementById('loading-text');
        this.loadingTips = document.getElementById('loading-tips');
        
        this.currentProgress = 0;
        this.totalSteps = 0;
        this.currentStep = 0;
        this.isLoading = false;
        
        this.tips = [
            "üí° M·∫πo: Gh√©p c√°c th·∫ª c√πng lo·∫°i ƒë·ªÉ t·∫°o ra th·∫ª m·∫°nh h∆°n!",
            "‚öîÔ∏è Warrior c√≥ th·ªÉ t·∫•n c√¥ng k·∫ª ƒë·ªãch ƒë·ªÉ b·∫£o v·ªá b·∫£n th√¢n",
            "üõ°Ô∏è S·ª≠ d·ª•ng Shield ƒë·ªÉ b·∫£o v·ªá kh·ªèi s√°t th∆∞∆°ng",
            "üí∞ Thu th·∫≠p Coin ƒë·ªÉ tƒÉng ƒëi·ªÉm s·ªë",
            "üçñ Food gi√∫p h·ªìi ph·ª•c HP cho Warrior",
            "üó°Ô∏è Sword tƒÉng s·ª©c t·∫•n c√¥ng cho Warrior",
            "üí£ Boom s·∫Ω n·ªï sau v√†i l∆∞·ª£t, h√£y c·∫©n th·∫≠n!",
            "üéÅ Treasure ch·ª©a nhi·ªÅu ph·∫ßn th∆∞·ªüng qu√Ω gi√°",
            "‚ò†Ô∏è Poison l√†m gi·∫£m HP theo th·ªùi gian",
            "üï≥Ô∏è Void s·∫Ω nu·ªët ch·ª≠ng th·∫ª xung quanh",
            "üîÆ Catalyst c√≥ th·ªÉ bi·∫øn ƒë·ªïi th·∫ª th√†nh lo·∫°i kh√°c",
            "üè¥‚Äç‚ò†Ô∏è Eremite l√† k·∫ª ƒë·ªãch m·∫°nh, h√£y c·∫©n th·∫≠n!",
            "üåä Abyss Lector c√≥ s·ª©c m·∫°nh ƒë·∫∑c bi·ªát",
            "üêã Narwhal c√≥ th·ªÉ t·∫•n c√¥ng t·ª´ xa",
            "üïµÔ∏è Operative c√≥ kh·∫£ nƒÉng ·∫©n n·∫•p",
            "üéØ Gh√©p 3 th·∫ª c√πng lo·∫°i ƒë·ªÉ t·∫°o ra th·∫ª m·∫°nh h∆°n",
            "‚ö° S·ª≠ d·ª•ng Trap ƒë·ªÉ b·∫´y k·∫ª ƒë·ªãch",
            "üå™Ô∏è Quicksand c√≥ th·ªÉ l√†m ch·∫≠m k·∫ª ƒë·ªãch",
            "üíé Bribery c√≥ th·ªÉ mua chu·ªôc k·∫ª ƒë·ªãch",
            "üåü Gh√©p 5 th·∫ª c√πng lo·∫°i ƒë·ªÉ t·∫°o ra th·∫ª hi·∫øm!"
        ];
        
        this.currentTipIndex = 0;
        this.tipInterval = null;
        this.lastTipIndex = -1; // ƒê·ªÉ tr√°nh hi·ªÉn th·ªã c√πng tip li√™n ti·∫øp
        
        // Danh s√°ch h√¨nh ·∫£nh c·∫ßn preload
        this.imageList = [
            'resources/warrior.webp',
            'resources/fatui0.webp',
            'resources/fatui1.webp',
            'resources/fatui2.webp',
            'resources/fatui3.webp',
            'resources/food0.webp',
            'resources/food1.webp',
            'resources/food2.webp',
            'resources/food3.webp',
            'resources/sword0.webp',
            'resources/sword1.webp',
            'resources/sword2.webp',
            'resources/sword3.webp',
            'resources/sword4.webp',
            'resources/sword5.webp',
            'resources/sword6.webp',
            'resources/coin0.webp',
            'resources/coin1.webp',
            'resources/coin2.webp',
            'resources/coin3.webp',
            'resources/coin4.webp',
            'resources/coin5.webp',
            'resources/coin6.webp',
            'resources/coinUp0.webp',
            'resources/coinUp1.webp',
            'resources/coinUp2.webp',
            'resources/coinUp3.webp',
            'resources/coinUp4.webp',
            'resources/coinUp5.webp',
            'resources/coinUp6.webp',
            'resources/trap.webp',
            'resources/poison.webp',
            'resources/boom.webp',
            'resources/quicksand.webp',
            'resources/treasure0.webp',
            'resources/treasure1.webp',
            'resources/bribery.webp',
            'resources/catalyst0.webp',
            'resources/catalyst1.webp',
            'resources/catalyst2.webp',
            'resources/eremite0.webp',
            'resources/eremite1.webp',
            'resources/abyssLector0.webp',
            'resources/abyssLector1.webp',
            'resources/abyssLector2.webp',
            'resources/apep.webp',
            'resources/dragon.webp',
            'resources/narwhal.webp',
            'resources/operative.webp',
            'resources/void.webp'
        ];
        
        this.loadedImages = 0;
        this.totalImages = this.imageList.length;
        
        // Danh s√°ch scripts c·∫ßn load
        this.scriptList = [
            // Card classes
            "modules/cards/Card.js",
            "modules/cards/Fatui0.js",
            "modules/cards/Fatui1.js",
            "modules/cards/Fatui2.js",
            "modules/cards/Fatui3.js",
            "modules/cards/Food0.js",
            "modules/cards/Food1.js",
            "modules/cards/Food2.js",
            "modules/cards/Food3.js",
            "modules/cards/Sword0.js",
            "modules/cards/Sword1.js",
            "modules/cards/Sword2.js",
            "modules/cards/Sword3.js",
            "modules/cards/Sword4.js",
            "modules/cards/Sword5.js",
            "modules/cards/Sword6.js",
            "modules/cards/Coin0.js",
            "modules/cards/Coin1.js",
            "modules/cards/Coin2.js",
            "modules/cards/Coin3.js",
            "modules/cards/Coin4.js",
            "modules/cards/Coin5.js",
            "modules/cards/Coin6.js",
            "modules/cards/CoinUp0.js",
            "modules/cards/CoinUp1.js",
            "modules/cards/CoinUp2.js",
            "modules/cards/CoinUp3.js",
            "modules/cards/CoinUp4.js",
            "modules/cards/CoinUp5.js",
            "modules/cards/CoinUp6.js",
            "modules/cards/Warrior.js",
            "modules/cards/Trap.js",
            "modules/cards/Poison.js",
            "modules/cards/Boom.js",
            "modules/cards/Quicksand.js",
            "modules/cards/Treasure0.js",
            "modules/cards/Treasure1.js",
            "modules/cards/Bribery.js",
            "modules/cards/Catalyst0.js",
            "modules/cards/Catalyst1.js",
            "modules/cards/Catalyst2.js",
            "modules/cards/Eremite0.js",
            "modules/cards/Eremite1.js",
            "modules/cards/AbyssLector0.js",
            "modules/cards/AbyssLector1.js",
            "modules/cards/AbyssLector2.js",
            "modules/cards/Apep.js",
            "modules/cards/Dragon.js",
            "modules/cards/Narwhal.js",
            "modules/cards/Operative.js",
            "modules/cards/Void.js",
            "modules/cards/CardFactory.js",
            
            // Manager classes
            "modules/CardManager.js",
            "modules/GameState.js",
            "modules/CharacterManager.js",
            "modules/AnimationManager.js",
            "modules/UIManager.js",
            "modules/CombatManager.js",
            "modules/EventManager.js",
            "modules/DungeonCardGame.js"
        ];
        
        this.loadedScripts = 0;
        this.totalScripts = this.scriptList.length;
    }
    
    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh loading th·ª±c s·ª±
     */
    startLoading() {
        this.isLoading = true;
        this.currentProgress = 0;
        this.currentStep = 0;
        this.updateProgress(0, "ƒêang kh·ªüi t·∫°o game...");
        this.startTipRotation();
    }
    
    /**
     * C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô loading
     * @param {number} progress - Ti·∫øn ƒë·ªô t·ª´ 0-100
     * @param {string} text - Text hi·ªÉn th·ªã
     */
    updateProgress(progress, text) {
        this.currentProgress = progress;
        this.progressFill.style.width = `${progress}%`;
        this.loadingText.textContent = text;
    }
    
    /**
     * Load scripts tu·∫ßn t·ª±
     * @returns {Promise} Promise khi t·∫•t c·∫£ scripts ƒë√£ load xong
     */
    async loadScriptsSequentially() {
        return new Promise((resolve, reject) => {
            let index = 0;
            
            const loadNext = () => {
                if (index >= this.scriptList.length) {
                    resolve();
                    return;
                }
                
                const script = document.createElement("script");
                script.src = this.scriptList[index];
                
                script.onload = () => {
                    this.loadedScripts++;
                    const progress = Math.round((this.loadedScripts / this.totalScripts) * 50); // Scripts chi·∫øm 50% progress
                    this.updateProgress(progress, `ƒêang t·∫£i scripts... (${this.loadedScripts}/${this.totalScripts})`);
                    index++;
                    loadNext();
                };
                
                script.onerror = () => {
                    console.error(`‚ùå Failed to load script: ${this.scriptList[index]}`);
                    this.loadedScripts++;
                    index++;
                    loadNext(); // Ti·∫øp t·ª•c load script ti·∫øp theo
                };
                
                document.head.appendChild(script);
            };
            
            loadNext();
        });
    }
    
    /**
     * Preload t·∫•t c·∫£ h√¨nh ·∫£nh v√†o cache c·ªßa tr√¨nh duy·ªát
     * @returns {Promise} Promise khi t·∫•t c·∫£ h√¨nh ·∫£nh ƒë√£ load xong
     */
    async preloadImages() {
        const imagePromises = this.imageList.map((src) => {
            return new Promise((resolve) => {
                // T·∫°o Image object ƒë·ªÉ preload v√†o cache
                const preloadImg = new Image();
                
                preloadImg.onload = () => {
                    this.loadedImages++;
                    const progress = 50 + Math.round((this.loadedImages / this.totalImages) * 30); // Images chi·∫øm 30% progress (50-80%)
                    this.updateProgress(progress, `ƒêang t·∫£i h√¨nh ·∫£nh... (${this.loadedImages}/${this.totalImages})`);
                    
                    // Log ƒë·ªÉ debug
                    console.log(`‚úÖ Preloaded: ${src}`);
                    
                    resolve();
                };
                
                preloadImg.onerror = () => {
                    console.warn(`‚ùå Kh√¥ng th·ªÉ preload h√¨nh ·∫£nh: ${src}`);
                    this.loadedImages++;
                    resolve(); // V·∫´n resolve ƒë·ªÉ kh√¥ng block loading
                };
                
                // G√°n src ƒë·ªÉ trigger load v√†o cache
                preloadImg.src = src;
            });
        });
        
        return Promise.all(imagePromises);
    }
    
    /**
     * Kh·ªüi t·∫°o c√°c manager v√† components
     */
    async initializeComponents() {
        try {
            // Kh·ªüi t·∫°o CharacterManager (kh√¥ng c·∫ßn dependencies)
            this.updateProgress(80, "ƒêang kh·ªüi t·∫°o Character Manager...");
            if (typeof CharacterManager !== 'undefined') {
                window.characterManager = new CharacterManager();
                console.log("‚úÖ CharacterManager initialized");
            } else {
                throw new Error("CharacterManager not loaded");
            }
            
            // Kh·ªüi t·∫°o GameState v·ªõi CharacterManager
            this.updateProgress(82, "ƒêang kh·ªüi t·∫°o Game State...");
            if (typeof GameState !== 'undefined') {
                window.gameState = new GameState(window.characterManager);
                console.log("‚úÖ GameState initialized");
            } else {
                throw new Error("GameState not loaded");
            }
            
            // Kh·ªüi t·∫°o CardManager (kh√¥ng c·∫ßn dependencies)
            this.updateProgress(84, "ƒêang kh·ªüi t·∫°o Card Manager...");
            if (typeof CardManager !== 'undefined') {
                window.cardManager = new CardManager();
                console.log("‚úÖ CardManager initialized");
            } else {
                throw new Error("CardManager not loaded");
            }
            
            // Kh·ªüi t·∫°o AnimationManager v·ªõi CardManager v√† CharacterManager
            this.updateProgress(86, "ƒêang kh·ªüi t·∫°o Animation Manager...");
            if (typeof AnimationManager !== 'undefined') {
                window.animationManager = new AnimationManager(window.cardManager, window.characterManager);
                console.log("‚úÖ AnimationManager initialized");
            } else {
                throw new Error("AnimationManager not loaded");
            }
            
            // Kh·ªüi t·∫°o UIManager v·ªõi GameState v√† CharacterManager
            this.updateProgress(88, "ƒêang kh·ªüi t·∫°o UI Manager...");
            if (typeof UIManager !== 'undefined') {
                window.uiManager = new UIManager(window.gameState, window.characterManager);
                console.log("‚úÖ UIManager initialized");
            } else {
                throw new Error("UIManager not loaded");
            }
            
            // Kh·ªüi t·∫°o CombatManager v·ªõi CharacterManager, CardManager v√† AnimationManager
            this.updateProgress(90, "ƒêang kh·ªüi t·∫°o Combat Manager...");
            if (typeof CombatManager !== 'undefined') {
                window.combatManager = new CombatManager(window.characterManager, window.cardManager, window.animationManager);
                console.log("‚úÖ CombatManager initialized");
            } else {
                throw new Error("CombatManager not loaded");
            }
            
            // Kh·ªüi t·∫°o EventManager v·ªõi t·∫•t c·∫£ dependencies
            this.updateProgress(92, "ƒêang kh·ªüi t·∫°o Event Manager...");
            if (typeof EventManager !== 'undefined') {
                window.eventManager = new EventManager(
                    window.gameState, 
                    window.cardManager, 
                    window.characterManager, 
                    window.combatManager, 
                    window.animationManager, 
                    window.uiManager
                );
                console.log("‚úÖ EventManager initialized");
            } else {
                throw new Error("EventManager not loaded");
            }
            
            // Setup c√°c dependencies gi·ªØa c√°c manager
            this.updateProgress(94, "ƒêang thi·∫øt l·∫≠p dependencies...");
            
            // Set eventManager cho AnimationManager ƒë·ªÉ c√≥ th·ªÉ setup events sau combat
            if (window.animationManager && typeof window.animationManager.setEventManager === 'function') {
                window.animationManager.setEventManager(window.eventManager);
                console.log("‚úÖ AnimationManager -> EventManager dependency set");
            }
            
            // Set animationManager cho CharacterManager ƒë·ªÉ c√≥ th·ªÉ g·ªçi triggerGameOver
            if (window.characterManager && typeof window.characterManager.setAnimationManager === 'function') {
                window.characterManager.setAnimationManager(window.animationManager);
                console.log("‚úÖ CharacterManager -> AnimationManager dependency set");
            }
            
        } catch (error) {
            console.error("‚ùå Error initializing components:", error);
            throw error;
        }
    }
    
    /**
     * Setup c√°c manager v√† chu·∫©n b·ªã cho game
     */
    async setupGame() {
        try {
            this.updateProgress(95, "ƒêang thi·∫øt l·∫≠p c√°c manager...");
            
            // Ki·ªÉm tra t·∫•t c·∫£ manager ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
            if (!window.characterManager || !window.gameState || !window.cardManager || 
                !window.animationManager || !window.uiManager || !window.combatManager || 
                !window.eventManager) {
                throw new Error("M·ªôt s·ªë manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
            }
            
            this.updateProgress(98, "ƒêang chu·∫©n b·ªã game...");
            
            // Log th√†nh c√¥ng
            console.log("‚úÖ T·∫•t c·∫£ managers ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng");
            console.log("‚úÖ S·∫µn s√†ng t·∫°o game instance");
            
            this.updateProgress(99, "ƒêang s·∫µn s√†ng game...");
            
        } catch (error) {
            console.error("‚ùå Error setting up managers:", error);
            throw error;
        }
    }
    
    /**
     * B·∫Øt ƒë·∫ßu xoay v√≤ng c√°c m·∫πo
     */
    startTipRotation() {
        this.showNextTip();
        this.tipInterval = setInterval(() => {
            this.showNextTip();
        }, 1000);
    }
    
    /**
     * D·ª´ng xoay v√≤ng c√°c m·∫πo
     */
    stopTipRotation() {
        if (this.tipInterval) {
            clearInterval(this.tipInterval);
            this.tipInterval = null;
        }
    }
    
    /**
     * Hi·ªÉn th·ªã m·∫πo ti·∫øp theo
     */
    showNextTip() {
        if (this.loadingTips && this.loadingTips.querySelector('p')) {
            // Ch·ªçn tip ng·∫´u nhi√™n, tr√°nh hi·ªÉn th·ªã c√πng tip li√™n ti·∫øp
            let randomIndex;
            do {
                randomIndex = Math.floor(Math.random() * this.tips.length);
            } while (randomIndex === this.lastTipIndex && this.tips.length > 1);
            
            this.lastTipIndex = randomIndex;
            this.loadingTips.querySelector('p').textContent = this.tips[randomIndex];
        }
    }
    
    /**
     * Ho√†n th√†nh loading v√† ·∫©n m√†n h√¨nh
     */
    completeLoading() {
        this.isLoading = false;
        this.stopTipRotation();
        this.updateProgress(100, "Ho√†n t·∫•t! ƒêang kh·ªüi ƒë·ªông game...");
        
        setTimeout(() => {
            this.loadingScreen.classList.add('fade-out');
            
            setTimeout(() => {
                this.loadingScreen.style.display = 'none';
            }, 300);
        }, 300);
    }
    
    /**
     * Hi·ªÉn th·ªã l·ªói loading
     * @param {string} errorMessage - Th√¥ng b√°o l·ªói
     */
    showError(errorMessage) {
        this.isLoading = false;
        this.stopTipRotation();
        this.loadingText.textContent = `L·ªói: ${errorMessage}`;
        this.loadingText.style.color = '#ff6b6b';
        
        // Th√™m n√∫t th·ª≠ l·∫°i
        const retryButton = document.createElement('button');
        retryButton.textContent = 'Th·ª≠ L·∫°i';
        retryButton.className = 'btn btn-primary mt-3';
        retryButton.onclick = () => {
            location.reload();
        };
        
        if (this.loadingTips) {
            this.loadingTips.innerHTML = '';
            this.loadingTips.appendChild(retryButton);
        }
    }
    
    /**
     * Hi·ªÉn th·ªã l·∫°i m√†n h√¨nh loading
     */
    show() {
        this.loadingScreen.style.display = 'flex';
        this.loadingScreen.classList.remove('fade-out');
    }
    
    /**
     * ·∫®n m√†n h√¨nh loading
     */
    hide() {
        this.loadingScreen.classList.add('fade-out');
        setTimeout(() => {
            this.loadingScreen.style.display = 'none';
        }, 300);
    }
    
    /**
     * Loading th·ª±c s·ª± - Load scripts, t√†i nguy√™n v√† kh·ªüi t·∫°o game
     */
    async realLoad() {
        this.startLoading();
        
        try {
            // B∆∞·ªõc 1: Load t·∫•t c·∫£ scripts tu·∫ßn t·ª±
            this.updateProgress(0, "ƒêang t·∫£i scripts...");
            await this.loadScriptsSequentially();
            
            // B∆∞·ªõc 2: Preload t·∫•t c·∫£ h√¨nh ·∫£nh
            this.updateProgress(50, "ƒêang t·∫£i h√¨nh ·∫£nh...");
            await this.preloadImages();
            
            // B∆∞·ªõc 3: Kh·ªüi t·∫°o c√°c components
            await this.initializeComponents();
            
            // B∆∞·ªõc 4: Setup game
            await this.setupGame();
            
            this.completeLoading();
            
        } catch (error) {
            this.showError('L·ªói khi t·∫£i t√†i nguy√™n: ' + error.message);
            console.error('‚ùå L·ªói loading:', error);
        }
    }
}

// Export cho s·ª≠ d·ª•ng global
window.LoadingManager = LoadingManager; 