/**
 * LoadingManager.js - Real Resource Loading
 * Qu·∫£n l√Ω m√†n h√¨nh loading v√† th·ª±c s·ª± load t√†i nguy√™n game
 */
class LoadingManager {
    constructor() {
        this.loadingScreen = document.getElementById('loading-screen');
        this.progressFill = document.getElementById('progress-fill');
        this.loadingText = document.getElementById('loading-text');
        this.loadingTips = document.getElementById('loading-tips');
        
        this.currentProgress = 0;
        this.totalSteps = 0;
        this.currentStep = 0;
        this.isLoading = false;
        
        this.tips = [
            "üí° M·∫πo: L·ª£i d·ª•ng c∆° quan phun l·ª≠a ƒë·ªÉ t·∫•n c√¥ng k·∫ª ƒë·ªãch!",
            "‚öîÔ∏è Warrior c√≥ th·ªÉ t·∫•n c√¥ng k·∫ª ƒë·ªãch ƒë·ªÉ b·∫£o v·ªá b·∫£n th√¢n",
            "üõ°Ô∏è S·ª≠ d·ª•ng Shield ƒë·ªÉ b·∫£o v·ªá kh·ªèi s√°t th∆∞∆°ng",
            "üí∞ Thu th·∫≠p Coin ƒë·ªÉ tƒÉng ƒëi·ªÉm s·ªë",
            "üçñ Food gi√∫p h·ªìi ph·ª•c HP cho Warrior",
            "üó°Ô∏è Sword tƒÉng s·ª©c t·∫•n c√¥ng cho Warrior",
            "üí£ Boom s·∫Ω n·ªï sau v√†i l∆∞·ª£t, h√£y c·∫©n th·∫≠n!",
            "üéÅ Treasure ch·ª©a nhi·ªÅu ph·∫ßn th∆∞·ªüng qu√Ω gi√°",
            "‚ò†Ô∏è Poison l√†m gi·∫£m HP theo th·ªùi gian",
            "üï≥Ô∏è Void l√† m·ªôt th·∫ª ƒë·∫∑c bi·ªát kh√¥ng c√≥ b·∫•t k·ª≥ t√°c d·ª•ng n√†o"
        ];
        
        this.currentTipIndex = 0;
        this.tipInterval = null;
        
        // Danh s√°ch h√¨nh ·∫£nh c·∫ßn preload
        this.imageList = [
            'resources/warrior.webp',
            'resources/fatui0.webp',
            'resources/fatui1.webp',
            'resources/fatui2.webp',
            'resources/fatui3.webp',
            'resources/food0.webp',
            'resources/food1.webp',
            'resources/food2.webp',
            'resources/food3.webp',
            'resources/sword0.webp',
            'resources/sword1.webp',
            'resources/sword2.webp',
            'resources/sword3.webp',
            'resources/sword4.webp',
            'resources/sword5.webp',
            'resources/sword6.webp',
            'resources/coin0.webp',
            'resources/coin1.webp',
            'resources/coin2.webp',
            'resources/coin3.webp',
            'resources/coin4.webp',
            'resources/coin5.webp',
            'resources/coin6.webp',
            'resources/coinUp0.webp',
            'resources/coinUp1.webp',
            'resources/coinUp2.webp',
            'resources/coinUp3.webp',
            'resources/coinUp4.webp',
            'resources/coinUp5.webp',
            'resources/coinUp6.webp',
            'resources/trap.webp',
            'resources/poison.webp',
            'resources/boom.webp',
            'resources/quicksand.webp',
            'resources/treasure0.webp',
            'resources/treasure1.webp',
            'resources/bribery.webp',
            'resources/catalyst0.webp',
            'resources/catalyst1.webp',
            'resources/catalyst2.webp',
            'resources/eremite0.webp',
            'resources/eremite1.webp',
            'resources/abyssLector0.webp',
            'resources/abyssLector1.webp',
            'resources/abyssLector2.webp',
            'resources/apep.webp',
            'resources/narwhal.webp',
            'resources/operative.webp',
            'resources/void.webp'
        ];
        
        this.loadedImages = 0;
        this.totalImages = this.imageList.length;
    }
    
    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh loading th·ª±c s·ª±
     */
    startLoading() {
        this.isLoading = true;
        this.currentProgress = 0;
        this.currentStep = 0;
        this.updateProgress(0, "ƒêang kh·ªüi t·∫°o game...");
        this.startTipRotation();
    }
    
    /**
     * C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô loading
     * @param {number} progress - Ti·∫øn ƒë·ªô t·ª´ 0-100
     * @param {string} text - Text hi·ªÉn th·ªã
     */
    updateProgress(progress, text) {
        this.currentProgress = progress;
        this.progressFill.style.width = `${progress}%`;
        this.loadingText.textContent = text;
    }
    
    /**
     * Preload t·∫•t c·∫£ h√¨nh ·∫£nh
     * @returns {Promise} Promise khi t·∫•t c·∫£ h√¨nh ·∫£nh ƒë√£ load xong
     */
    async preloadImages() {
        const imagePromises = this.imageList.map((src) => {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => {
                    this.loadedImages++;
                    const progress = Math.round((this.loadedImages / this.totalImages) * 100);
                    this.updateProgress(progress, `ƒêang t·∫£i h√¨nh ·∫£nh... (${this.loadedImages}/${this.totalImages})`);
                    resolve();
                };
                img.onerror = () => {
                    console.warn(`Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh: ${src}`);
                    this.loadedImages++;
                    resolve(); // V·∫´n resolve ƒë·ªÉ kh√¥ng block loading
                };
                img.src = src;
            });
        });
        
        return Promise.all(imagePromises);
    }
    
    /**
     * Kh·ªüi t·∫°o c√°c manager v√† components
     */
    async initializeComponents() {
        // Kh·ªüi t·∫°o CharacterManager
        this.updateProgress(10, "ƒêang kh·ªüi t·∫°o Character Manager...");
        await this.delay(100);
        
        // Kh·ªüi t·∫°o GameState
        this.updateProgress(20, "ƒêang kh·ªüi t·∫°o Game State...");
        await this.delay(100);
        
        // Kh·ªüi t·∫°o CardManager
        this.updateProgress(30, "ƒêang kh·ªüi t·∫°o Card Manager...");
        await this.delay(100);
        
        // Kh·ªüi t·∫°o AnimationManager
        this.updateProgress(40, "ƒêang kh·ªüi t·∫°o Animation Manager...");
        await this.delay(100);
        
        // Kh·ªüi t·∫°o UIManager
        this.updateProgress(50, "ƒêang kh·ªüi t·∫°o UI Manager...");
        await this.delay(100);
        
        // Kh·ªüi t·∫°o CombatManager
        this.updateProgress(60, "ƒêang kh·ªüi t·∫°o Combat Manager...");
        await this.delay(100);
        
        // Kh·ªüi t·∫°o EventManager
        this.updateProgress(70, "ƒêang kh·ªüi t·∫°o Event Manager...");
        await this.delay(100);
    }
    
    /**
     * T·∫°o th·∫ª v√† setup game
     */
    async setupGame() {
        this.updateProgress(80, "ƒêang t·∫°o th·∫ª v√† setup game...");
        await this.delay(200);
        
        this.updateProgress(90, "ƒêang thi·∫øt l·∫≠p events...");
        await this.delay(200);
        
        this.updateProgress(95, "ƒêang s·∫µn s√†ng game...");
        await this.delay(100);
    }
    
    /**
     * Delay helper function
     * @param {number} ms - Th·ªùi gian delay (milliseconds)
     * @returns {Promise} Promise
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * B·∫Øt ƒë·∫ßu xoay v√≤ng c√°c m·∫πo
     */
    startTipRotation() {
        this.showNextTip();
        this.tipInterval = setInterval(() => {
            this.showNextTip();
        }, 2000);
    }
    
    /**
     * D·ª´ng xoay v√≤ng c√°c m·∫πo
     */
    stopTipRotation() {
        if (this.tipInterval) {
            clearInterval(this.tipInterval);
            this.tipInterval = null;
        }
    }
    
    /**
     * Hi·ªÉn th·ªã m·∫πo ti·∫øp theo
     */
    showNextTip() {
        if (this.loadingTips && this.loadingTips.querySelector('p')) {
            this.loadingTips.querySelector('p').textContent = this.tips[this.currentTipIndex];
            this.currentTipIndex = (this.currentTipIndex + 1) % this.tips.length;
        }
    }
    
    /**
     * Th√™m m·∫πo m·ªõi
     * @param {string} tip - M·∫πo m·ªõi
     */
    addTip(tip) {
        this.tips.push(tip);
    }
    
    /**
     * Ho√†n th√†nh loading v√† ·∫©n m√†n h√¨nh
     */
    completeLoading() {
        this.isLoading = false;
        this.stopTipRotation();
        this.updateProgress(100, "Ho√†n t·∫•t! ƒêang kh·ªüi ƒë·ªông game...");
        
        setTimeout(() => {
            this.loadingScreen.classList.add('fade-out');
            
            setTimeout(() => {
                this.loadingScreen.style.display = 'none';
            }, 300);
        }, 300);
    }
    
    /**
     * Hi·ªÉn th·ªã l·ªói loading
     * @param {string} errorMessage - Th√¥ng b√°o l·ªói
     */
    showError(errorMessage) {
        this.isLoading = false;
        this.stopTipRotation();
        this.loadingText.textContent = `L·ªói: ${errorMessage}`;
        this.loadingText.style.color = '#ff6b6b';
        
        // Th√™m n√∫t th·ª≠ l·∫°i
        const retryButton = document.createElement('button');
        retryButton.textContent = 'Th·ª≠ L·∫°i';
        retryButton.className = 'btn btn-primary mt-3';
        retryButton.onclick = () => {
            location.reload();
        };
        
        if (this.loadingTips) {
            this.loadingTips.innerHTML = '';
            this.loadingTips.appendChild(retryButton);
        }
    }
    
    /**
     * Hi·ªÉn th·ªã l·∫°i m√†n h√¨nh loading
     */
    show() {
        this.loadingScreen.style.display = 'flex';
        this.loadingScreen.classList.remove('fade-out');
    }
    
    /**
     * ·∫®n m√†n h√¨nh loading
     */
    hide() {
        this.loadingScreen.classList.add('fade-out');
        setTimeout(() => {
            this.loadingScreen.style.display = 'none';
        }, 300);
    }
    
    /**
     * Loading th·ª±c s·ª± - Load t√†i nguy√™n v√† kh·ªüi t·∫°o game
     */
    async realLoad() {
        this.startLoading();
        
        try {
            // B∆∞·ªõc 1: Preload t·∫•t c·∫£ h√¨nh ·∫£nh
            this.updateProgress(0, "ƒêang t·∫£i h√¨nh ·∫£nh...");
            await this.preloadImages();
            
            // B∆∞·ªõc 2: Kh·ªüi t·∫°o c√°c components
            await this.initializeComponents();
            
            // B∆∞·ªõc 3: Setup game
            await this.setupGame();
            
            this.completeLoading();
            
        } catch (error) {
            this.showError('L·ªói khi t·∫£i t√†i nguy√™n: ' + error.message);
            console.error('‚ùå L·ªói loading:', error);
        }
    }
    
    /**
     * Loading nhanh - Ch·ªâ preload h√¨nh ·∫£nh quan tr·ªçng
     */
    async quickLoad() {
        this.startLoading();
        
        try {
            // Ch·ªâ preload m·ªôt s·ªë h√¨nh ·∫£nh c∆° b·∫£n
            const essentialImages = [
                'resources/warrior.webp',
                'resources/fatui0.webp',
                'resources/food0.webp',
                'resources/sword0.webp',
                'resources/coin0.webp'
            ];
            
            this.updateProgress(0, "ƒêang t·∫£i h√¨nh ·∫£nh c∆° b·∫£n...");
            const imagePromises = essentialImages.map((src) => {
                return new Promise((resolve) => {
                    const img = new Image();
                    img.onload = resolve;
                    img.onerror = resolve; // Kh√¥ng block n·∫øu l·ªói
                    img.src = src;
                });
            });
            
            await Promise.all(imagePromises);
            
            this.updateProgress(50, "ƒêang kh·ªüi t·∫°o game...");
            await this.delay(200);
            
            this.updateProgress(100, "Ho√†n t·∫•t!");
            await this.delay(100);
            
            this.completeLoading();
            
        } catch (error) {
            this.showError('L·ªói khi t·∫£i t√†i nguy√™n: ' + error.message);
        }
    }
}

// Export cho s·ª≠ d·ª•ng global
window.LoadingManager = LoadingManager; 