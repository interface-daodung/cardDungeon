// Eula.js - Th·∫ª nh√¢n v·∫≠t Eula
// Ch·ª©c nƒÉng: Nh√¢n v·∫≠t ng∆∞·ªùi ch∆°i ƒëi·ªÅu khi·ªÉn

class Eula extends Card {
    // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho Eula
    static DEFAULT_HP = 12;
    static DEFAULT_ELEMENT_COIN = 0;
    
    constructor() {
        super(
            "Eula", 
            "character", 
            "resources/eula.webp", 
            "eula"
        );
        this.hp = Eula.DEFAULT_HP; // HP ban ƒë·∫ßu t·ª´ Eula
        this.elementCoin = Eula.DEFAULT_ELEMENT_COIN; // Element coin t·ª´ Eula
        this.weapon = 0; // ƒê·ªô b·ªÅn v≈© kh√≠
        this.weaponName = null; // T√™n v≈© kh√≠
    }

    /**
     * Hi·ªáu ·ª©ng khi th·∫ª b·ªã ƒÉn (kh√¥ng bao gi·ªù x·∫£y ra)
     * @param {CharacterManager} characterManager - Manager qu·∫£n l√Ω character
     * @param {GameState} gameState - Manager qu·∫£n l√Ω game state
     * @returns
     * @param {CardManager} cardManager - Manager qu·∫£n l√Ω th·∫ª {Object} Th√¥ng tin k·∫øt qu·∫£
     */
    cardEffect(characterManager, gameState, cardManager) {
        // Eula kh√¥ng bao gi·ªù b·ªã ƒÉn
        return null;
    }

    /**
     * L·∫•y th√¥ng tin hi·ªÉn th·ªã cho dialog
     * @returns {Object} Th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã
     */
    getDisplayInfo() {
        const baseInfo = super.getDisplayInfo();
        let description = `<strong>${this.type}</strong> - HP: <span class="hp-text">${this.hp}/12</span>`;
        
        // Th√™m th√¥ng tin v≈© kh√≠ n·∫øu c√≥
        if (this.weapon > 0 && this.weaponName) {
            description += `<br><strong>${this.weaponName}</strong> - Durability: <span class="durability-text">${this.weapon}</span>`;
        }
        
        // Th√™m th√¥ng tin recovery n·∫øu c√≥
        if (this.recovery > 0) {
            description += `<br> <strong>Recovery</strong><span class="recovery-icon">üíö</span>: <span class="recovery-text">${this.recovery} l∆∞·ª£t</span>`;
        }
        
        // Th√™m th√¥ng tin poisoned n·∫øu c√≥
        if (this.poisoned > 0) {
            description += `<br> <strong>Poisoned</strong><span class="poison-icon">‚ò†</span>: <span class="poison-text">${this.poisoned} l∆∞·ª£t</span>`;
        }
        
        return {
            ...baseInfo,
            description: description,
            hp: this.hp,
            weapon: this.weapon,
            weaponName: this.weaponName,
            recovery: this.recovery,
            poisoned: this.poisoned
        };
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin t·ª´ CharacterManager
     * @param {CharacterManager} characterManager - Manager qu·∫£n l√Ω character
     */
    updateFromCharacter(characterManager) {
        this.hp = characterManager.getCharacterHP();
        this.weapon = characterManager.getCharacterWeaponDurability();
        this.weaponName = characterManager.getCharacterWeaponName();
        this.elementCoin = characterManager.getCharacterElementCoin();
        this.recovery = characterManager.getRecovery();
        this.poisoned = characterManager.getPoisoned();
    }
}
