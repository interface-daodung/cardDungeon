// Venti.js - Th·∫ª nh√¢n v·∫≠t Venti
// Ch·ª©c nƒÉng: Nh√¢n v·∫≠t ng∆∞·ªùi ch∆°i ƒëi·ªÅu khi·ªÉn

class Venti extends Card {
    // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho Venti
    static DEFAULT_HP = 9;
    static DEFAULT_ELEMENT_COIN = 5;
    
    constructor() {
        super(
            "Venti", 
            "character", 
            "resources/venti.webp", 
            "venti"
        );
        this.hp = Venti.DEFAULT_HP; // HP ban ƒë·∫ßu t·ª´ Venti
        this.elementCoin = Venti.DEFAULT_ELEMENT_COIN; // Element coin t·ª´ Venti
        this.weapon = 0; // ƒê·ªô b·ªÅn v≈© kh√≠
        this.weaponName = null; // T√™n v≈© kh√≠
        this.storyText = "Venti, v·ªã th·∫ßn Anemo t·ª± do c·ªßa Mondstadt, c√≤n ƒë∆∞·ª£c g·ªçi l√† 'Barbatos'. L√† m·ªôt trong nh·ªØng v·ªã th·∫ßn nguy√™n th·ªßy, Venti c√≥ kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn gi√≥ v√† t·∫°o ra nh·ªØng c∆°n b√£o m·∫°nh m·∫Ω. D√π c√≥ s·ª©c m·∫°nh kh·ªïng l·ªì, √¥ng l·∫°i ch·ªçn c√°ch s·ªëng nh∆∞ m·ªôt thi sƒ© lang thang, th√≠ch u·ªëng r∆∞·ª£u v√† s√°ng t√°c th∆° ca. Venti ƒë·∫°i di·ªán cho t·ª± do v√† gi·∫•c m∆°, lu√¥n b·∫£o v·ªá Mondstadt kh·ªèi nh·ªØng m·ªëi ƒëe d·ªça b√™n ngo√†i.";
        this.effectText = "ƒëang c·∫≠p nh·∫≠t";
    }

    /**
     * Hi·ªáu ·ª©ng khi th·∫ª b·ªã ƒÉn (kh√¥ng bao gi·ªù x·∫£y ra)
     * @param {CharacterManager} characterManager - Manager qu·∫£n l√Ω character
     * @param {GameState} gameState - Manager qu·∫£n l√Ω game state
     * @returns
     * @param {CardManager} cardManager - Manager qu·∫£n l√Ω th·∫ª {Object} Th√¥ng tin k·∫øt qu·∫£
     */
    cardEffect(characterManager, gameState, cardManager) {
        // Venti kh√¥ng bao gi·ªù b·ªã ƒÉn
        return null;
    }

    /**
     * L·∫•y th√¥ng tin hi·ªÉn th·ªã cho dialog
     * @returns {Object} Th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã
     */
    getDisplayInfo() {
        const baseInfo = super.getDisplayInfo();
        let description = `<strong>${this.type}</strong> - HP: <span class="hp-text">${this.hp}/9</span>`;
        
        // Th√™m th√¥ng tin v≈© kh√≠ n·∫øu c√≥
        if (this.weapon > 0 && this.weaponName) {
            description += `<br><strong>${this.weaponName}</strong> - Durability: <span class="durability-text">${this.weapon}</span>`;
        }
        
        // Th√™m th√¥ng tin recovery n·∫øu c√≥
        if (this.recovery > 0) {
            description += `<br> <strong>Recovery</strong><span class="recovery-icon">üíö</span>: <span class="recovery-text">${this.recovery} l∆∞·ª£t</span>`;
        }
        
        // Th√™m th√¥ng tin poisoned n·∫øu c√≥
        if (this.poisoned > 0) {
            description += `<br> <strong>Poisoned</strong><span class="poison-icon">‚ò†</span>: <span class="poison-text">${this.poisoned} l∆∞·ª£t</span>`;
        }
        
        return {
            ...baseInfo,
            description: description,
            hp: this.hp,
            weapon: this.weapon,
            weaponName: this.weaponName,
            recovery: this.recovery,
            poisoned: this.poisoned
        };
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin t·ª´ CharacterManager
     * @param {CharacterManager} characterManager - Manager qu·∫£n l√Ω character
     */
    updateFromCharacter(characterManager) {
        this.hp = characterManager.getCharacterHP();
        this.weapon = characterManager.getCharacterWeaponDurability();
        this.weaponName = characterManager.getCharacterWeaponName();
        this.elementCoin = characterManager.getCharacterElementCoin();
        this.recovery = characterManager.getRecovery();
        this.poisoned = characterManager.getPoisoned();
    }
}
