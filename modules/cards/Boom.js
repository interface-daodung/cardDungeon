// Boom.js - Th·∫ª bom
// Ch·ª©c nƒÉng: Th·∫ª bom g√¢y h·∫°i cho ng∆∞·ªùi ch∆°i

class Boom extends Card {
    constructor() {
        super(
            "Bom n·ªï", 
            "boom", 
            "resources/boom.webp", 
            "Bom n·ªï"
        );
        this.damage = Math.floor(Math.random() * 9) + 10; // S√°t th∆∞∆°ng c·ªßa bom
        this.countdown = 5; // ƒê·∫øm ng∆∞·ª£c
    }



    /**
     * T∆∞∆°ng t√°c v·ªõi character (t∆∞∆°ng t·ª± treasure)
     * @param {CharacterManager} characterManager - Manager qu·∫£n l√Ω character
     * @param {GameState} gameState - Manager qu·∫£n l√Ω game state
     * @param {CardManager} cardManager - Manager qu·∫£n l√Ω cards
     * @param {number} boomIndex - Index c·ªßa boom card
     * @returns {Object} Th√¥ng tin k·∫øt qu·∫£
     */
    interactWithCharacter(characterManager, gameState, cardManager, boomIndex) {
        // T√¨m v·ªã tr√≠ character
        const characterIndex = cardManager.findCharacterIndex();
        
        if (characterIndex !== null && boomIndex !== null) {
            // L·∫•y to√†n b·ªô m·∫£ng cards hi·ªán t·∫°i
            const cards = cardManager.getAllCards();
            
            // ƒê·ªïi v·ªã tr√≠ character v√† boom trong m·∫£ng
            const temp = cards[characterIndex];
            cards[characterIndex] = cards[boomIndex];
            cards[boomIndex] = temp;
            
            // C·∫≠p nh·∫≠t id v√† position cho c·∫£ hai cards
            if (cards[characterIndex]) {
                cards[characterIndex].id = characterIndex;
                cards[characterIndex].position = { row: Math.floor(characterIndex / 3), col: characterIndex % 3 };
            }
            if (cards[boomIndex]) {
                cards[boomIndex].id = boomIndex;
                cards[boomIndex].position = { row: Math.floor(boomIndex / 3), col: boomIndex % 3 };
            }
            
            // C·∫≠p nh·∫≠t to√†n b·ªô m·∫£ng cards
            cardManager.setAllCards(cards);
            
            return {
                type: 'boom_interact',
                effect: `Boom ƒë·ªïi v·ªã tr√≠ v·ªõi character!`,
                characterPosition: boomIndex,
                boomPosition: characterIndex
            };
        }
        
        return {
            type: 'boom_interact',
            effect: `T∆∞∆°ng t√°c v·ªõi Boom!`
        };
    }

    /**
     * Hi·ªáu ·ª©ng khi boom n·ªï (countdown = 0)
     * @param {CharacterManager} characterManager - Manager qu·∫£n l√Ω character
     * @param {GameState} gameState - Manager qu·∫£n l√Ω game state
     * @param {CardManager} cardManager - Manager qu·∫£n l√Ω cards
     * @param {number} boomIndex - Index c·ªßa boom card
     * @param {AnimationManager} animationManager - Manager qu·∫£n l√Ω animation (optional)
     * @returns {Object} Th√¥ng tin k·∫øt qu·∫£
     */
    explodeEffect(characterManager, gameState, cardManager, boomIndex, animationManager = null) {
        // C·∫≠p nh·∫≠t v·ªã tr√≠ character tr∆∞·ªõc khi ki·ªÉm tra
        const cards = cardManager.getAllCards();
        let characterIndex = null;
        
        // T√¨m character trong m·∫£ng cards hi·ªán t·∫°i
        for (let i = 0; i < cards.length; i++) {
            if (cards[i] && cards[i].type === 'character') {
                characterIndex = i;
                break;
            }
        }
        
        console.log(`üí• Character th·ª±c t·∫ø t·∫°i index: ${characterIndex}`);
        
        // T√¨m c√°c th·∫ª li·ªÅn k·ªÅ (tr√™n, d∆∞·ªõi, tr√°i, ph·∫£i)
        const adjacentCards = this.getAdjacentCards(cardManager, boomIndex);
        console.log(`üí• Boom t·∫°i index ${boomIndex}: adjacentCards =`, adjacentCards);
        
        // G√¢y damage cho character n·∫øu character ·ªü g·∫ßn
        if (characterIndex !== null && adjacentCards.includes(characterIndex)) {
            console.log(`üí• Character ·ªü g·∫ßn boom! G√¢y ${this.damage} damage`);
            characterManager.updateCharacterHP(this.damage);
            
            // Ki·ªÉm tra game over sau khi g√¢y damage
            if (characterManager.getCharacterHP() <= 0) {
                console.log(`üíÄ Character HP = 0 do boom, triggering game over!`);
                // Trigger game over th√¥ng qua animationManager n·∫øu c√≥
                if (animationManager) {
                    animationManager.triggerGameOver();
                }
            }
        } else {
            console.log(`üí• Character kh√¥ng ·ªü g·∫ßn boom ho·∫∑c kh√¥ng t·ªìn t·∫°i`);
        }
        
        // G√¢y damage cho c√°c th·∫ª kh√°c (kh√¥ng ph·∫£i character)
        const affectedNonCharacterCards = [];
        for (const cardIndex of adjacentCards) {
            if (cardIndex !== characterIndex) {
                const card = cardManager.getCard(cardIndex);
                if (card) {
                    // G√¢y damage cho enemy cards
                    if (card.type === 'enemy' && card.hp !== undefined && card.hp > 0) {
                        const originalHP = card.hp;
                        console.log(`üí• Enemy ${card.nameId} t·∫°i index ${cardIndex}: HP ban ƒë·∫ßu = ${originalHP}, damage = ${this.damage}`);
                        card.hp -= this.damage;
                        console.log(`üí• Enemy ${card.nameId} sau damage: HP = ${card.hp}`);
                        
                        if (card.hp <= 0) {
                            card.hp = 0; // ƒê·∫£m b·∫£o HP kh√¥ng √¢m
                            console.log(`üí• Enemy ${card.nameId} HP = 0, s·∫Ω ch·∫øt!`);
                            
                            // Ch·∫°y killByWeaponEffect n·∫øu c√≥
                            if (typeof card.killByWeaponEffect === 'function') {
                                console.log(`üí• Enemy ${card.nameId} b·ªã gi·∫øt b·ªüi boom, ch·∫°y killByWeaponEffect`);
                                const killResult = card.killByWeaponEffect(characterManager, gameState);
                                console.log(`üí• Kill result:`, killResult);
                                
                                // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ killByWeaponEffect
                                if (killResult && killResult.reward) {
                                    if (killResult.reward.type === 'coin') {
                                        // T·∫°o coin m·∫∑c ƒë·ªãnh
                                        const coinCard = cardManager.cardFactory.createDynamicCoin(characterManager);
                                        coinCard.id = cardIndex;
                                        coinCard.position = { 
                                            row: Math.floor(cardIndex / 3), 
                                            col: cardIndex % 3 
                                        };
                                        console.log(`üí• T·∫°o coin t·ª´ killByWeaponEffect: ${coinCard.nameId} t·∫°i index ${cardIndex}`);
                                        cardManager.updateCard(cardIndex, coinCard);
                                    } else if (killResult.reward.type === 'food3') {
                                        // T·∫°o Food3 card
                                        const foodCard = cardManager.cardFactory.createCard('Food3');
                                        foodCard.id = cardIndex;
                                        foodCard.position = { 
                                            row: Math.floor(cardIndex / 3), 
                                            col: cardIndex % 3 
                                        };
                                        console.log(`üí• T·∫°o Food3 t·ª´ killByWeaponEffect: ${foodCard.nameId} t·∫°i index ${cardIndex}`);
                                        cardManager.updateCard(cardIndex, foodCard);
                                    }
                                } else {
                                    // T·∫°o coin m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ reward
                                    const coinCard = cardManager.cardFactory.createDynamicCoin(characterManager);
                                    coinCard.id = cardIndex;
                                    coinCard.position = { 
                                        row: Math.floor(cardIndex / 3), 
                                        col: cardIndex % 3 
                                    };
                                    console.log(`üí• T·∫°o coin m·∫∑c ƒë·ªãnh: ${coinCard.nameId} t·∫°i index ${cardIndex}`);
                                    cardManager.updateCard(cardIndex, coinCard);
                                }
                            } else {
                                // T·∫°o coin theo m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ killByWeaponEffect
                                console.log(`üí• Enemy ${card.nameId} b·ªã gi·∫øt b·ªüi boom, t·∫°o coin m·∫∑c ƒë·ªãnh`);
                                // T·∫°o coin ngay t·∫°i ƒë√¢y v√† thay th·∫ø th·∫ª
                                const coinCard = cardManager.cardFactory.createDynamicCoin(characterManager);
                                coinCard.id = cardIndex;
                                coinCard.position = { 
                                    row: Math.floor(cardIndex / 3), 
                                    col: cardIndex % 3 
                                };
                                console.log(`üí• T·∫°o coin m·ªõi: ${coinCard.nameId} t·∫°i index ${cardIndex}`);
                                cardManager.updateCard(cardIndex, coinCard);
                                console.log(`üí• ƒê√£ thay th·∫ø enemy b·∫±ng coin trong cardManager`);
                            }
                        } else {
                            // HP ch∆∞a v·ªÅ 0, ch·∫°y attackByWeaponEffect n·∫øu c√≥
                            if (typeof card.attackByWeaponEffect === 'function') {
                                console.log(`üí• Enemy ${card.nameId} b·ªã damage b·ªüi boom, ch·∫°y attackByWeaponEffect`);
                                card.attackByWeaponEffect(characterManager, gameState);
                            }
                        }
                        
                        affectedNonCharacterCards.push({
                            index: cardIndex,
                            type: 'enemy',
                            damage: this.damage,
                            remainingHP: card.hp,
                            wasKilled: originalHP > 0 && card.hp === 0
                        });
                    }
                    // G√¢y damage cho food cards (Food0-3)
                    else if (card.type === 'food' && card.heal !== undefined && card.heal > 0) {
                        const originalHeal = card.heal;
                        console.log(`üí• Food ${card.nameId} t·∫°i index ${cardIndex}: heal ban ƒë·∫ßu = ${originalHeal}, damage = ${this.damage}`);
                        card.heal -= this.damage;
                        console.log(`üí• Food ${card.nameId} sau damage: heal = ${card.heal}`);
                        
                        if (card.heal <= 0) {
                            card.heal = 0; // ƒê·∫£m b·∫£o heal kh√¥ng √¢m
                            console.log(`üí• Food ${card.nameId} heal = 0, t·∫°o th·∫ª void!`);
                            
                            // T·∫°o th·∫ª void thay th·∫ø
                            const voidCard = cardManager.cardFactory.createVoid();
                            voidCard.id = cardIndex;
                            voidCard.position = { 
                                row: Math.floor(cardIndex / 3), 
                                col: cardIndex % 3 
                            };
                            console.log(`üí• T·∫°o void thay th·∫ø food: ${voidCard.nameId} t·∫°i index ${cardIndex}`);
                            cardManager.updateCard(cardIndex, voidCard);
                        }
                        
                        affectedNonCharacterCards.push({
                            index: cardIndex,
                            type: 'food',
                            damage: this.damage,
                            remainingHeal: card.heal,
                            wasKilled: originalHeal > 0 && card.heal === 0
                        });
                    }
                    // G√¢y damage cho poison cards
                    else if (card.type === 'poison' && card.poisonDuration !== undefined && card.poisonDuration > 0) {
                        const originalPoisonDuration = card.poisonDuration;
                        const originalHeal = card.heal;
                        console.log(`üí• Poison ${card.nameId} t·∫°i index ${cardIndex}: poisonDuration ban ƒë·∫ßu = ${originalPoisonDuration}, heal = ${originalHeal}, damage = ${this.damage}`);
                        
                        card.poisonDuration -= this.damage;
                        card.heal -= this.damage;
                        console.log(`üí• Poison ${card.nameId} sau damage: poisonDuration = ${card.poisonDuration}, heal = ${card.heal}`);
                        
                        if (card.poisonDuration <= 0 || card.heal <= 0) {
                            card.poisonDuration = Math.max(0, card.poisonDuration);
                            card.heal = Math.max(0, card.heal);
                            console.log(`üí• Poison ${card.nameId} poisonDuration ho·∫∑c heal = 0, t·∫°o th·∫ª void!`);
                            
                            // T·∫°o th·∫ª void thay th·∫ø
                            const voidCard = cardManager.cardFactory.createVoid();
                            voidCard.id = cardIndex;
                            voidCard.position = { 
                                row: Math.floor(cardIndex / 3), 
                                col: cardIndex % 3 
                            };
                            console.log(`üí• T·∫°o void thay th·∫ø poison: ${voidCard.nameId} t·∫°i index ${cardIndex}`);
                            cardManager.updateCard(cardIndex, voidCard);
                        }
                        
                        affectedNonCharacterCards.push({
                            index: cardIndex,
                            type: 'poison',
                            damage: this.damage,
                            remainingPoisonDuration: card.poisonDuration,
                            remainingHeal: card.heal,
                            wasKilled: (originalPoisonDuration > 0 && card.poisonDuration === 0) || (originalHeal > 0 && card.heal === 0)
                        });
                    }
                    // G√¢y damage cho coin cards
                    else if (card.type === 'coin' && card.score !== undefined && card.score > 0) {
                        const originalScore = card.score;
                        console.log(`üí• Coin ${card.nameId} t·∫°i index ${cardIndex}: score ban ƒë·∫ßu = ${originalScore}, damage = ${this.damage}`);
                        card.score -= this.damage;
                        console.log(`üí• Coin ${card.nameId} sau damage: score = ${card.score}`);
                        
                        if (card.score <= 0) {
                            card.score = 0; // ƒê·∫£m b·∫£o score kh√¥ng √¢m
                            console.log(`üí• Coin ${card.nameId} score = 0, t·∫°o th·∫ª void!`);
                            
                            // T·∫°o th·∫ª void thay th·∫ø
                            const voidCard = cardManager.cardFactory.createVoid();
                            voidCard.id = cardIndex;
                            voidCard.position = { 
                                row: Math.floor(cardIndex / 3), 
                                col: cardIndex % 3 
                            };
                            console.log(`üí• T·∫°o void thay th·∫ø coin: ${voidCard.nameId} t·∫°i index ${cardIndex}`);
                            cardManager.updateCard(cardIndex, voidCard);
                        }
                        
                        affectedNonCharacterCards.push({
                            index: cardIndex,
                            type: 'coin',
                            damage: this.damage,
                            remainingScore: card.score,
                            wasKilled: originalScore > 0 && card.score === 0
                        });
                    }
                    // G√¢y damage cho weapon cards (Sword, Catalyst)
                    else if ((card.type === 'weapon' || card.type === 'sword') && card.durability !== undefined && card.durability > 0) {
                        const originalDurability = card.durability;
                        console.log(`üí• Weapon ${card.nameId} t·∫°i index ${cardIndex}: durability ban ƒë·∫ßu = ${originalDurability}, damage = ${this.damage}`);
                        card.durability -= this.damage;
                        console.log(`üí• Weapon ${card.nameId} sau damage: durability = ${card.durability}`);
                        
                        if (card.durability <= 0) {
                            card.durability = 0; // ƒê·∫£m b·∫£o durability kh√¥ng √¢m
                            console.log(`üí• Weapon ${card.nameId} durability = 0, t·∫°o th·∫ª void!`);
                            
                            // T·∫°o th·∫ª void thay th·∫ø
                            const voidCard = cardManager.cardFactory.createVoid();
                            voidCard.id = cardIndex;
                            voidCard.position = { 
                                row: Math.floor(cardIndex / 3), 
                                col: cardIndex % 3 
                            };
                            console.log(`üí• T·∫°o void thay th·∫ø weapon: ${voidCard.nameId} t·∫°i index ${cardIndex}`);
                            cardManager.updateCard(cardIndex, voidCard);
                        }
                        
                        affectedNonCharacterCards.push({
                            index: cardIndex,
                            type: 'weapon',
                            damage: this.damage,
                            remainingDurability: card.durability,
                            wasKilled: originalDurability > 0 && card.durability === 0
                        });
                    }
                    // C√≥ th·ªÉ th√™m logic cho c√°c lo·∫°i th·∫ª kh√°c ·ªü ƒë√¢y
                }
            }
        }
        
        // T·∫°o th·∫ª ng·∫´u nhi√™n thay th·∫ø boom
        const newCard = cardManager.cardFactory.createRandomCard(characterManager);
        newCard.id = boomIndex;
        newCard.position = { row: Math.floor(boomIndex / 3), col: boomIndex % 3 };
        
        return {
            type: 'boom_exploded',
            effect: `Boom n·ªï! G√¢y ${this.damage} damage cho c√°c th·∫ª li·ªÅn k·ªÅ!`,
            damage: this.damage,
            adjacentCards: adjacentCards,
            affectedNonCharacterCards: affectedNonCharacterCards,
            newCard: newCard,
            boomIndex: boomIndex
        };
    }

    /**
     * L·∫•y danh s√°ch c√°c th·∫ª li·ªÅn k·ªÅ
     * @param {CardManager} cardManager - Manager qu·∫£n l√Ω cards
     * @param {number} boomIndex - Index c·ªßa boom card
     * @returns {Array} M·∫£ng c√°c index c·ªßa th·∫ª li·ªÅn k·ªÅ
     */
    getAdjacentCards(cardManager, boomIndex) {
        const adjacentCards = [];
        const boomRow = Math.floor(boomIndex / 3);
        const boomCol = boomIndex % 3;
        
        console.log(`üí• Boom position: row=${boomRow}, col=${boomCol}`);
        
        // Ki·ªÉm tra c√°c v·ªã tr√≠ li·ªÅn k·ªÅ
        const adjacentPositions = [
            { row: boomRow - 1, col: boomCol }, // Tr√™n
            { row: boomRow + 1, col: boomCol }, // D∆∞·ªõi
            { row: boomRow, col: boomCol - 1 }, // Tr√°i
            { row: boomRow, col: boomCol + 1 }  // Ph·∫£i
        ];
        
        for (const pos of adjacentPositions) {
            // Ki·ªÉm tra v·ªã tr√≠ h·ª£p l·ªá (trong grid 3x3)
            if (pos.row >= 0 && pos.row < 3 && pos.col >= 0 && pos.col < 3) {
                const index = pos.row * 3 + pos.col;
                const card = cardManager.getCard(index);
                console.log(`üí• Checking position (${pos.row}, ${pos.col}) = index ${index}, card type: ${card ? card.type : 'null'}`);
                if (card && card.type !== 'boom') { // Kh√¥ng bao g·ªìm boom kh√°c
                    adjacentCards.push(index);
                    console.log(`üí• Added ${card.type} at index ${index} to adjacent cards`);
                }
            } else {
                console.log(`üí• Position (${pos.row}, ${pos.col}) is out of bounds`);
            }
        }
        
        console.log(`üí• Final adjacent cards:`, adjacentCards);
        return adjacentCards;
    }

    /**
     * L·∫•y th√¥ng tin hi·ªÉn th·ªã cho dialog
     * @returns {Object} Th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã
     */
    getDisplayInfo() {
        const baseInfo = super.getDisplayInfo();
        return {
            ...baseInfo,
            description: `N·ªï ƒê·ªãnh H∆∞·ªõng C√≥ Ki·ªÉm So√°t - G√¢y ${this.damage} s√°t th∆∞∆°ng`,
            damage: this.damage
        };
    }
} 
