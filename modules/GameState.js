// GameState.js - Qu·∫£n l√Ω tr·∫°ng th√°i t·ªïng th·ªÉ c·ªßa game
// Ch·ª©c nƒÉng: L∆∞u tr·ªØ v√† qu·∫£n l√Ω t·∫•t c·∫£ tr·∫°ng th√°i c·ªßa game
// Bao g·ªìm score, moves, high score, drag state, touch state

class GameState {
    /**
     * Kh·ªüi t·∫°o GameState v·ªõi c√°c tr·∫°ng th√°i ban ƒë·∫ßu
     * Qu·∫£n l√Ω t·∫•t c·∫£ state c·∫ßn thi·∫øt cho game
     */
    constructor(characterManager = null) {
        // ===== GAME STATISTICS =====
        this.score = 0; // ƒêi·ªÉm s·ªë hi·ªán t·∫°i
        this.moves = 0; // S·ªë l∆∞·ª£t di chuy·ªÉn
        this.highScore = this.loadHighScore(); // High score t·ª´ localStorage
        
        // ===== CHARACTER MANAGER REFERENCE =====
        this.characterManager = characterManager; // Reference ƒë·∫øn CharacterManager ƒë·ªÉ x·ª≠ l√Ω ƒë·ªôc
        
        // ===== DRAG & DROP STATE =====
        this.draggedCard = null; // Th·∫ª ƒëang ƒë∆∞·ª£c k√©o (index)
        this.dragStartPos = null; // V·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o (x, y)
        
        // ===== LONG PRESS STATE =====
        this.longPressTimer = null; // Timer cho long press
        this.longPressDelay = 2000; // Th·ªùi gian delay cho long press (2.0 gi√¢y)
        
        // ===== TOUCH STATE =====
        this.touchStartTime = null; // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu touch
        this.touchStartPos = null; // V·ªã tr√≠ b·∫Øt ƒë·∫ßu touch
    }

    /**
     * Reset t·∫•t c·∫£ tr·∫°ng th√°i v√† ban ƒë·∫ßu
     * ƒê∆∞·ª£c g·ªçi khi restart game ho·∫∑c new game
     */
    reset() {
        // ===== RESET GAME STATISTICS =====
        this.score = 0; // Reset ƒëi·ªÉm s·ªë
        this.moves = 0; // Reset s·ªë l∆∞·ª£t
        
        // ===== RESET DRAG STATE =====
        this.draggedCard = null; // Reset th·∫ª ƒëang k√©o
        this.dragStartPos = null; // Reset v·ªã tr√≠ b·∫Øt ƒë·∫ßu
        
        // ===== RESET LONG PRESS STATE =====
        this.longPressTimer = null; // Reset timer
        
        // ===== RESET TOUCH STATE =====
        this.touchStartTime = null; // Reset touch start time
        this.touchStartPos = null; // Reset touch start position
        
        // L∆∞u √Ω: Kh√¥ng reset high score - gi·ªØ l·∫°i th√†nh t√≠ch cao nh·∫•t
    }

    // ===== SCORE & MOVES MANAGEMENT =====
    /**
     * Th√™m ƒëi·ªÉm v√†o t·ªïng ƒëi·ªÉm
     * @param {number} points - S·ªë ƒëi·ªÉm c·∫ßn th√™m
     */
    addScore(points) { 
        // ƒê·∫£m b·∫£o points l√† s·ªë h·ª£p l·ªá
        const validPoints = points || 0;
        console.log(`üí∞ Adding score: points=${points}, validPoints=${validPoints}, currentScore=${this.score}`);
        this.score += validPoints; 
        console.log(`üí∞ New score: ${this.score}`);
        this.updateHighScore(); // C·∫≠p nh·∫≠t high score khi score thay ƒë·ªïi
    }
    
    /**
     * TƒÉng s·ªë l∆∞·ª£t di chuy·ªÉn
     */
    incrementMoves() { 
        this.moves++; 
        
        // ===== X·ª¨ L√ù ƒê·ªòC V√Ä H·ªíI PH·ª§C KHI TƒÇNG MOVE =====
        if (this.characterManager) {
            this.characterManager.processRecovery(); // X·ª≠ l√Ω tr∆∞·ªõc 
            this.characterManager.processPoison(); // X·ª≠ l√Ω ƒë·ªôc sau 
            
        }
    }
    
    /**
     * L·∫•y ƒëi·ªÉm s·ªë hi·ªán t·∫°i
     * @returns {number} ƒêi·ªÉm s·ªë hi·ªán t·∫°i
     */
    getScore() { 
        return this.score; 
    }
    
    /**
     * L·∫•y s·ªë l∆∞·ª£t di chuy·ªÉn
     * @returns {number} S·ªë l∆∞·ª£t di chuy·ªÉn
     */
    getMoves() { 
        return this.moves; 
    }
    
    /**
     * L·∫•y high score
     * @returns {number} High score cao nh·∫•t
     */
    getHighScore() {
        return this.highScore;
    }
    
    // ===== DRAG & DROP STATE MANAGEMENT =====
    /**
     * Set th·∫ª ƒëang ƒë∆∞·ª£c k√©o
     * @param {number} index - Index c·ªßa th·∫ª ƒëang k√©o
     */
    setDraggedCard(index) { 
        this.draggedCard = index; 
    }
    
    /**
     * L·∫•y th·∫ª ƒëang ƒë∆∞·ª£c k√©o
     * @returns {number|null} Index c·ªßa th·∫ª ƒëang k√©o ho·∫∑c null
     */
    getDraggedCard() { 
        return this.draggedCard; 
    }
    
    /**
     * X√≥a th·∫ª ƒëang ƒë∆∞·ª£c k√©o
     */
    clearDraggedCard() { 
        this.draggedCard = null; 
    }
    
    /**
     * Set v·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o
     * @param {Object} pos - V·ªã tr√≠ {x, y}
     */
    setDragStartPos(pos) { 
        this.dragStartPos = pos; 
    }
    
    /**
     * L·∫•y v·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o
     * @returns {Object|null} V·ªã tr√≠ b·∫Øt ƒë·∫ßu ho·∫∑c null
     */
    getDragStartPos() { 
        return this.dragStartPos; 
    }
    
    /**
     * X√≥a v·ªã tr√≠ b·∫Øt ƒë·∫ßu k√©o
     */
    clearDragStartPos() { 
        this.dragStartPos = null; 
    }
    
    // ===== LONG PRESS STATE MANAGEMENT =====
    /**
     * Set timer cho long press
     * @param {number} timer - Timer ID
     */
    setLongPressTimer(timer) { 
        this.longPressTimer = timer; 
    }
    
    /**
     * L·∫•y timer hi·ªán t·∫°i
     * @returns {number|null} Timer ID ho·∫∑c null
     */
    getLongPressTimer() { 
        return this.longPressTimer; 
    }
    
    /**
     * X√≥a timer v√† d·ª´ng long press
     * Clear timeout ƒë·ªÉ tr√°nh memory leak
     */
    clearLongPressTimer() {
        if (this.longPressTimer) {
            clearTimeout(this.longPressTimer);
            this.longPressTimer = null;
        }
    }
    
    /**
     * L·∫•y th·ªùi gian delay cho long press
     * @returns {number} Th·ªùi gian delay (ms)
     */
    getLongPressDelay() { 
        return this.longPressDelay; 
    }
    
    // ===== TOUCH STATE MANAGEMENT =====
    /**
     * Set th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu touch
     * @param {number} time - Timestamp
     */
    setTouchStartTime(time) {
        this.touchStartTime = time;
    }
    
    /**
     * L·∫•y th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu touch
     * @returns {number|null} Timestamp ho·∫∑c null
     */
    getTouchStartTime() {
        return this.touchStartTime;
    }
    
    /**
     * X√≥a th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu touch
     */
    clearTouchStartTime() {
        this.touchStartTime = null;
    }
    
    /**
     * Set v·ªã tr√≠ b·∫Øt ƒë·∫ßu touch
     * @param {Object} pos - V·ªã tr√≠ {x, y}
     */
    setTouchStartPos(pos) {
        this.touchStartPos = pos;
    }
    
    /**
     * L·∫•y v·ªã tr√≠ b·∫Øt ƒë·∫ßu touch
     * @returns {Object|null} V·ªã tr√≠ ho·∫∑c null
     */
    getTouchStartPos() {
        return this.touchStartPos;
    }
    
    /**
     * X√≥a v·ªã tr√≠ b·∫Øt ƒë·∫ßu touch
     */
    clearTouchStartPos() {
        this.touchStartPos = null;
    }
    
    // ===== HIGH SCORE PERSISTENCE =====
    /**
     * Load high score t·ª´ localStorage
     * @returns {number} High score ƒë√£ l∆∞u ho·∫∑c 0
     */
    loadHighScore() {
        const saved = localStorage.getItem('cardDungeonHighScore');
        return saved ? parseInt(saved) : 0;
    }
    
    /**
     * Save high score v√†o localStorage
     * Ch·ªâ l∆∞u n·∫øu score m·ªõi cao h∆°n high score hi·ªán t·∫°i
     * @param {number} score - Score c·∫ßn l∆∞u
     */
    saveHighScore(score) {
        if (score > this.highScore) {
            this.highScore = score;
            localStorage.setItem('cardDungeonHighScore', score.toString());
        }
    }
    
    /**
     * Update high score n·∫øu score hi·ªán t·∫°i cao h∆°n
     * ƒê∆∞·ª£c g·ªçi t·ª± ƒë·ªông khi score thay ƒë·ªïi
     */
    updateHighScore() {
        this.saveHighScore(this.score);
    }
} 